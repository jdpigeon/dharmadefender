/// <reference types="web-bluetooth" />
import { EventTarget } from 'event-target-shim';
export declare class CharacteristicMock extends EventTarget {
    service: PrimaryServiceMock;
    value: DataView;
    constructor(service: PrimaryServiceMock);
    startNotifications(): void;
    readValue(): void;
    writeValue(): void;
}
export declare class PrimaryServiceMock {
    device: DeviceMock;
    private characteristicMocks;
    constructor(device: DeviceMock);
    getCharacteristic(characteristic: BluetoothCharacteristicUUID): Promise<CharacteristicMock>;
    getCharacteristicMock(characteristic: BluetoothCharacteristicUUID): CharacteristicMock;
}
export declare class GattMock {
    device: DeviceMock;
    constructor(device: DeviceMock);
    connect(): Promise<this>;
    getPrimaryService(service: BluetoothServiceUUID): Promise<PrimaryServiceMock>;
}
export declare class DeviceMock extends EventTarget {
    name: string;
    private services;
    gatt: GattMock;
    serviceMocks: {
        [service: string]: PrimaryServiceMock;
    };
    constructor(name: string, services: BluetoothServiceUUID[]);
    hasService(service: BluetoothServiceUUID): boolean;
    getServiceMock(service: BluetoothServiceUUID): PrimaryServiceMock;
}
export declare class WebBluetoothMock {
    devices: DeviceMock[];
    constructor(devices: DeviceMock[]);
    requestDevice(options: RequestDeviceOptions): Promise<DeviceMock>;
}
